// Assignment #: 3 - Stacks & Queues
//         Name: Tyler Hickam
//      Lecture: CPI 220 - T Th 3-4:15 - Selgrad
//  Description: Solves in-fix math expressions. 
//               Displays the post fix expression.
package PostFixCalculator;

import javax.swing.JOptionPane;

/**
 *
 * @author Tyler
 */
public class Calculator extends javax.swing.JFrame {

    /**
     * Creates new form Calculator
     */
    public Calculator() {
        initComponents();
    }
    
    public boolean isOperator(String s) {
        //check if s is an operator (+, -, *, or /)
        return s.matches("(\\+|\\-|\\*|\\/)");
    }
    
    //check if a has a "greater or equal" priority than b
    public boolean hasGreaterOrEqualPriority(String a, String b) {
        int priorityOne = 0;
        int priorityTwo = 0;
        switch(a) {
            case "+": priorityOne = 1;
                      break;
            case "-": priorityOne = 2;
                      break;
            case "*": priorityOne = 3;
                      break;
            case "/": priorityOne = 4;
                      break;
            default: priorityOne = 0;
                     break;
        }
        switch(b) {
            case "+": priorityTwo = 1;
                      break;
            case "-": priorityTwo = 2;
                      break;
            case "*": priorityTwo = 3;
                      break;
            case "/": priorityTwo = 4;
                      break;
            default: priorityTwo = 0;
                     break;
        }
        
        return priorityOne >= priorityTwo;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mathField = new javax.swing.JTextField();
        calcButton = new javax.swing.JButton();
        descriptionLabel = new javax.swing.JLabel();
        answerDescLabel = new javax.swing.JLabel();
        answerLabel = new javax.swing.JLabel();
        postFixDescLabel = new javax.swing.JLabel();
        postFixExpLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("In-Fix Calculator");

        mathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mathFieldActionPerformed(evt);
            }
        });

        calcButton.setText("Calculate");
        calcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcButtonActionPerformed(evt);
            }
        });

        descriptionLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        descriptionLabel.setText("Enter an in-fix math expression. +, -, *, /, (, and ) are supported operators.");

        answerDescLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        answerDescLabel.setText("Answer:");

        answerLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        postFixDescLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        postFixDescLabel.setText("Post Fix Expression:");

        postFixExpLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(mathField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(calcButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(descriptionLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(answerDescLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(answerLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(postFixDescLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(postFixExpLabel)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calcButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postFixDescLabel)
                    .addComponent(postFixExpLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(answerDescLabel)
                    .addComponent(answerLabel))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mathFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mathFieldActionPerformed

    private void calcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcButtonActionPerformed
        // TODO add your handling code here:
        StackLinkedList stack = new StackLinkedList();
        String postFixExp = "";
        String inFixExp = mathField.getText();
        String error = "";
        if(inFixExp.length() < 3) {
            error = "You must have at least two operands and one operator.\n";
        } else {
            //check if inFixExp has only operators, operands, and parenthesis
            if(inFixExp.matches("(\\d+|\\d+.\\d+|\\+|\\-|\\*|\\/|\\(|\\))+")) {
                //split the inFixExp into tokens
                String[] inFixTokens = inFixExp.split("(?<=[-+*/\\(\\)])|(?=[-+*/\\(\\)])");
                for (String token : inFixTokens) {
                    if (isOperator(token)) {
                        if(stack.isEmpty()) {
                            //if token is an operator and stack is empty, push it to the stack
                            stack.push(token);
                        } else {
                            //if stack isnt empty, check the operator's priority with the operator on top of the stack
                            if(hasGreaterOrEqualPriority(token, (String)stack.peek())) {
                                //if the operator does have a greater or equal priority, push it to the stack
                                stack.push(token);
                            } else {
                                //if it doesn't, pop out the top operator and push the current operator to the stack
                                postFixExp += stack.pop() + " ";
                                stack.push(token);
                            }
                        }
                    } else
                    
                    if (token.equals("(")) {
                        //if the token is a (, push it
                        stack.push(token);
                    } else
                    
                    if (token.equals(")")) {
                        while(!stack.peek().equals("(")) {
                            //if the token is a ), pop out operators until we reach a (
                            postFixExp += stack.pop() + " ";
                        }
                        if(stack.peek().equals("(")) {
                            //once we get to the (, pop it to get rid of it
                            stack.pop();
                        }
                    } else {
                        //if the token is none of the above, it must be an operand, so add it to the postFixExp
                        postFixExp += token + " ";
                    }
                }
                while(!stack.isEmpty()) {
                    //add any remaining elements to the postFixExp
                    postFixExp += stack.pop() + " ";
                }
                
                //set the label to display the postFixExp
                postFixExpLabel.setText(postFixExp);
                //clear the stack to re-use it
                stack.clear();
                
                int postFixAnswer = 0;
                //split the postFixExp into tokens
                String[] postFixTokens = postFixExp.split(" ");
                for(String token : postFixTokens) {
                    if(isOperator(token)) {
                        //if the token is an operator, get two operands and operate on them
                        Float operandOne = Float.parseFloat(stack.pop().toString());
                        Float operandTwo = Float.parseFloat(stack.pop().toString());
                        float answer = 0;
                        switch (token) {
                            case "+":
                                {
                                    answer = operandOne + operandTwo;
                                    stack.push(answer);
                                    break;
                                }
                            case "-":
                                {
                                    answer = operandTwo - operandOne;
                                    stack.push(answer);
                                    break;
                                }
                            case "*":
                                {
                                    answer = operandOne * operandTwo;
                                    stack.push(answer);
                                    break;
                                }
                            case "/":
                                {
                                    answer = operandTwo / operandOne;
                                    stack.push(answer);
                                    break;
                                }
                            default:
                                break;
                        }
                    } else {
                        //if the token is an operand, push it to the stack
                        stack.push(token);
                    }
                }
                
                //once we've handled all of the postFixExp tokens, display the final answer
                answerLabel.setText(stack.pop().toString());
                
            } else {
                error = "Your expression may only include integers, floating point numbers,\n +, -, *, /, (, and )";
            }
        }
        if(!error.isEmpty()) {
            JOptionPane.showMessageDialog(this, error, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_calcButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel answerDescLabel;
    private javax.swing.JLabel answerLabel;
    private javax.swing.JButton calcButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField mathField;
    private javax.swing.JLabel postFixDescLabel;
    private javax.swing.JLabel postFixExpLabel;
    // End of variables declaration//GEN-END:variables
}
